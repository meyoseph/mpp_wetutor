# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: "3.7"

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: server # Use an image built from the specified dockerfile in the `server` directory.
      dockerfile: Dockerfile
    ports:
      - "9192:9192" # Forward the exposed port 9192 on the container to port 9192 on the host machine
    restart: always
    depends_on:
      - db # This service depends on mongodb. Start that first.
    environment: # Pass environment variables to the service
        spring.data.mongodb.uri: mongodb+srv://tutor:tutor@tutor.qgpyk.mongodb.net/tutor?retryWrites=true&w=majority
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

#   # Frontend Service
#   app-client:
#     build:
#       context: client # Use an image built from the specified dockerfile in the `client` directory.
#       dockerfile: Dockerfile
#       args:
#         REACT_APP_API_BASE_URL: http://localhost:9192/api
#     ports:
#       - "3000:80" # Forward the exposed port 80 on the container to port 3000 on the host machine
#     restart: always
#     depends_on:
#       - app-server
#     networks:
#       - frontend

  # Database Service (MongoDB)
  db:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: tutor
      MONGO_INITDB_ROOT_PASSWORD: tutor
    volumes:
      - db-data:/var/lib/mongo
    networks:
      - backend  

# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend: